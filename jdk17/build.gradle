/*
 * MIT License
 *
 * Copyright (c) 2021 Brice Dutheil <brice.dutheil@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
  id('java-library')
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
}


// For some reasons, IJ fails with this, instead run the built class directly
// java -cp build/classes/java/main -Dforeign.restricted=permit --add-modules=jdk.incubator.foreign sandbox.TryStuff
tasks.withType(JavaExec) {
  // java -Dforeign.restricted=permit --add-modules jdk.incubator.foreign
  jvmArgs(
          "--enable-native-access=ALL-UNNAMED",
          "--add-modules=jdk.incubator.foreign"
  )
}

tasks.withType(JavaCompile) {
  options.release.set(17)
  options.compilerArgs = ['--add-modules=jdk.incubator.foreign', '--enable-preview', '-Xlint:preview']
}

task("showToolchain") {
  doLast{
    def launcher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(17)
    }

    println launcher.get().executablePath
    println launcher.get().metadata.installationPath
  }
}

task jextractSDLHeaders {
  // TODO extract headers, check for SDL headers availability
  // Currently it's not possible to get precisely the
  // a panama JDK, see https://github.com/gradle/gradle/issues/18168
  
  // jextract --source -d src/main/java -t sdl2 \                                                                                                               11:11:06  100%
  //    -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
  //    -I /usr/local/include/SDL2 -l SDL2 \
  //    --header-class-name LibSDL2 \
  //    sdl-foo.h


  // Also see https://github.com/krakowski/gradle-jextract
}


task runSDLFoo(type: JavaExec) {
  // JAVA_LIBRARY_PATH=:/usr/local/lib java \
  //    -cp build/classes/java/main \
  //    --enable-native-access=ALL-UNNAMED \
  //    --add-modules=jdk.incubator.foreign \
  //    -XstartOnFirstThread \
  //    sandbox.SDLFoo
  mainClass.set('sandbox.SDLFoo')
  jvmArgs(
          "--enable-native-access=ALL-UNNAMED",
          "--add-modules=jdk.incubator.foreign",
          "-XstartOnFirstThread"
  )
  environment("JAVA_LIBRARY_PATH", ":/usr/local/lib")
  classpath(sourceSets.main.runtimeClasspath)
  
  // need to set the project's toolchain explicitly see: https://github.com/gradle/gradle/issues/16791
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}